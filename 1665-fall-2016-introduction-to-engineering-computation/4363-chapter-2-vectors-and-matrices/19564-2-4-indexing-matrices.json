{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4363-chapter-2-vectors-and-matrices","problemName":"19564-2-4-indexing-matrices"},"title":"2.4 - Indexing Matrices","description":"Find an efficient way to generate the following matrix:\n\n  mat = \n   7   8   9  10\n  12  10   8   6\n\n\nThen, give expressions that will, for the matrix \"mat\":\n\n* refer to the element in the first row, third column\n* refer to the entire second row\n* refer to the first two columns\n\nPlease do not change the variable names provided below.","type":1,"template":"% generate mat efficiently:\nmat = \n\n% index mat to obtain the elements listed above:\nelement = \nsecondrow = \nfirst2cols = \n","solution":"% generate mat efficiently:\nmat = [7:10; 12:-2:6];\n\n% index mat to obtain the elements listed above:\nelement = mat(1,3);\nsecondrow = mat(2,:);\nfirst2cols = mat(:,1:2);\n","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence\nvars = whos;\nis_element = any(strcmp('element', {vars.name}));\nassert(is_element, 'Make sure you define a variable with the name \"element\"')\nis_secondrow = any(strcmp('secondrow', {vars.name}));\nassert(is_secondrow, 'Make sure you define a variable with the name \"secondrow\"')\nis_first2cols = any(strcmp('first2cols', {vars.name}));\nassert(is_first2cols, 'Make sure you define a variable with the name \"first2cols\"')\n\n% check for correct results\nmat_test = [7 8 9 10; 12 10 8 6];\nelement_test = mat_test(1,3);\nsecondrow_test = mat_test(2,:);\nfirst2cols_test = mat_test(:,1:2);\n\nassert(isequal(mat,mat_test),'Check your expression for \"mat\". Make sure it is the matrix described in the problem statement.')\nassert(isequal(element,element_test),'Check your expression for the element in the first row, third column.')\nassert(isequal(secondrow,secondrow_test),'Check your expression for the second row of mat.')\nassert(isequal(first2cols,first2cols_test),'Check your expression for the first 2 columns of mat.')\n\n% check for efficiency; so check to make sure they use the colon operator to create mat\nfid = fopen('solution.m');\nif fid == -1\n  %do nothing\nelse\n  for i = 1:3 %because mat should be constructed in the \n    aline = fgetl(fid);\n    if ~isempty(aline)\n        if ~strcmp(aline(1),'%')\n          yesorno(i) = any(strfind(aline,':'));\n          i = i + 1;\n        end\n    end\n  end\n  iscolon = any(yesorno);\n  assert(iscolon,'For an efficient solution, make sure you use the colon operator. Do not hardcode the vector.')\n  fclose(fid);\nend"}