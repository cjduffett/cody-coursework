{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19594-5-9-un-vectorizing-part-ii"},"title":"5.9 - Un-Vectorizing, Part II","description":"Given a matrix variable \"mat\", write code using for loops, if statements, etc. that will accomplish the same as the following:\n\n  matsum = sum(mat')\n\n\nPlease make sure to store the result in \"matsum\"!","type":1,"template":"% mat has been initialized for you:\nmat = randi([-100,100],randi([15,20]),randi([15,20]));\n  \n% write your statements that accomplish the code above:\n","solution":"% mat has been initialized for you:\nmat = randi([-100,100],randi([15,20]),randi([15,20]));\n  \n% write your statements that accomplish the code above:\n[r, c] = size(mat);\nmatsum = zeros(1,r);\nfor i = 1:r\n    rowsum = 0;\n    for j = 1:c\n        rowsum = rowsum + mat(i,j);\n    end\n    matsum(i) = rowsum;\nend\n    ","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% FIRST,check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nmatExists = any(strcmp('mat',{vars.name}));\nassert(matExists,'Make sure the variable \"mat\" is defined.');\n\nmatsumExists = any(strcmp('matsum',{vars.name}));\nassert(matsumExists,'Make sure you define a variable with the name \"matsum\".')\n\n% SECOND, try to make sure vec and mat are unchanged\n[rmat cmat] = size(mat);\nassert(and(and(gt(rmat,14),lt(rmat,21)),and(gt(cmat,14),lt(cmat,21))),'Please do not change the initial expression for \"mat\".')\n\n% THIRD, check that the student didn't use the cumsum function\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','ID','String','cumsum');\nassert(isnull(matches),'Solution should NOT use the cumsum function.')\n\n% FOURTH, check that the student didn't use the sum function\nmatches = mtfind(t,'Kind','ID','String','sum');\nassert(isnull(matches),'Solution should NOT use the sum function.')\n\n% FIFTH, make sure they use loops for matsum\nformatches = mtfind(t,'Kind','FOR');\nwhilematches = mtfind(t,'Kind','WHILE');\nassert(or(~isnull(formatches),~isnull(whilematches)),'Your solution should use loops!')\nloopcount = count(whilematches) + count(formatches);\nassert(gt(loopcount,1),'Make sure you use two loops for matsum.')\n\n% SIXTH, check that the results are correct:\n\ntruematsum = sum(mat);\nalsomaybetruematsum = sum(mat'); %depending on how they answer, mat is or is not transposed\n%we might have to account for both possibilities\nassert(isequal(truematsum,matsum)||isequal(alsomaybetruematsum,matsum),'Your result for \"matsum\" is incorrect. Check your expressions.')"}