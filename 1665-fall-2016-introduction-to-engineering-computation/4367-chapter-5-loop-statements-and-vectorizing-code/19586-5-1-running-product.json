{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19586-5-1-running-product"},"title":"5.1 - Running Product","description":"Write a script that will calculate the product of the odd integers from 1 to n (or from 1 to n-1 if n is even) and store the result in the variable \"myprod\". *Use a for loop*.\n\nPlease do not change the provided variable names, and make sure to store the calculated product in the variable \"myprod\".","type":1,"template":"% Pick a value for n greater than 3:\nn = ?\n\n% Calculate the product of all the odd integers from 1 to n\n% (using a for loop) and store it in \"myprod\":\n\n\nmyprod = ?\n","solution":"% Pick a value for n greater than 3:\nn = 7;\n\n% Calculate the product of all the odd integers from 1 to n\n% (using a for loop) and store it in \"myprod\":\np = 1;\nfor i = 1:2:n\n    p = p * i;\nend\n\nmyprod = p;\n","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nis_n = any(strcmp('n',{vars.name}));\nassert(is_n,'Make sure you define a variable with the name \"n\".')\n\nis_myprod = any(strcmp('myprod',{vars.name}));\nassert(is_myprod,'Make sure you define a variable with the name \"myprod\".')\n\n% check that n is greater than 3\nassert(n > 3, 'You must pick a value of n greater than 3')\n\n% check that the student assigned the correct values for all named variables\nmyprod_test = prod(1:2:n);\n\nassert(isequal(myprod,myprod_test),'Check your expression for \"myprod\"')\n  \n% check to make sure student is using a FOR loop\n% This method was provided by JM from MathWorks\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','FOR');\nassert(~isnull(matches),'Your solution should use a FOR loop.')\n  \n% check to make sure student didn't use the prod function then put an empty loop in just to fool us!\nprodMatches = mtfind(t,'Kind','ID','String','prod');\nassert(isnull(prodMatches),'Your solution should not use the prod() function.')\n  \n% check that the student wrote general code, writing a for loop from 1:2:n\nforstart = strfind(code,'for');\nforstart = forstart(end); % skip first 2 \"for\" words that are part of the description\nlinebreaks = strfind(code,char(10));\nheaderend = linebreaks(find(linebreaks > forstart,1));\nforheader = code(forstart:headerend);\nusedn = strfind(forheader,'n');\nassert(~isempty(usedn),'Your code should be general. Your for loop should iterate through values up to n.')\n  \n% check that the student only used multiplication once inside the for loop\nforend = strfind(code,'end');\nmulti = strfind(code,'*');\nassert(lt(numel(multi),2),'You should only use multiplication once, inside the for loop.')\nassert(and(gt(multi,forstart),lt(multi,forend)),'You should only perform multiplication inside the for loop.')"}