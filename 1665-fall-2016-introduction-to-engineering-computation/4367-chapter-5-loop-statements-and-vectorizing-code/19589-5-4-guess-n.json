{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19589-5-4-guess-n"},"title":"5.4 - Guess n","description":"Write a script that will generate a random number 'n' in the range -100 to 100 then attempt to \"guess\" what the value of n is by repeatedly generating a new random number in the same range until the two match. The script should then print how many tries it took to guess \"n\" correctly, as well as the value of n. For example:\n\n  >> guess_n\n  It took 15 tries to guess n = 27\n  >> guess_n\n  It took 97 tries to guess n = -41\n","type":1,"template":"% generate a random value for n\nn = \n\n% repeatedly attempt to \"guess\" n. Store your guesses in the variable \"guess\"\nguess = \n\n% print the results\n","solution":"% generate a random value for n\nn = randi([-100,100]);\n\n% repeatedly attempt to \"guess\" n. Store your guesses in the variable \"guess\"\nguess = randi([-100,100]);\ntries = 1;\nwhile guess ~= n\n    guess = randi([-100,100]);\n    tries = tries + 1;\nend\n\n% print the results\nfprintf('It took %d tries to guess n = %d\\n', tries, n)","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nis_n = any(strcmp('n',{vars.name}));\nassert(is_n,'Make sure you define a variable with the name \"n\".')\n\nis_guess = any(strcmp('guess',{vars.name}));\nassert(is_guess,'Make sure you use the variable \"guess\".')\n\n% check that the user used randi\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','ID','String','randi');\nassert(~isnull(matches),'Your solution should use the randi() function.')\n\n% check the range of n\nassert(n >= -100 && n <= 100, 'You should generate numbers in the range of -100 to 100.')\n\n% check that the user has a while loop\nmatches = mtfind(t,'Kind','WHILE');\nassert(~isnull(matches),'Your solution should use a while loop.')\n\n% check for the fprintf function\nmatches = mtfind(t,'Kind','ID','String','fprintf');\nassert(~isnull(matches),'Your solution should use fprintf() to show the results to the user.')\n\n% check that guess matches n\nassert(guess == n, 'Your final guess should match the value of n.')"}