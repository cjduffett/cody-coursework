{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19593-5-8-un-vectorizing-part-i"},"title":"5.8 - Un-Vectorizing, Part I","description":"And now, for the reverse of vectorizing. Given a vector variable \"vec\", write code using for loops, if statements, etc. that will accomplish the same as the following:\n\n  cumvec = cumsum(vec)\n\n\nPlease make sure to store the result in \"cumvec\"!","type":1,"template":"% vec has been initialized for you:\nvec = randi([-100,100],1,randi([20,50]));\n  \n% write your statements that accomplish the code above:\n","solution":"% vec has been initialized for you:\nvec = randi([-100,100],1,randi([20,50]));\n  \n% write your statements that accomplish the code above:\ncumvec = zeros(1,length(vec));\nrunsum = 0;\nfor i = 1:length(vec)\n    runsum = runsum + vec(i);\n    cumvec(i) = runsum;\nend\n","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% FIRST,check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nvecExists = any(strcmp('vec',{vars.name}));\nassert(vecExists,'Make sure the variable \"vec\" is defined.');\n\ncumvecExists = any(strcmp('cumvec',{vars.name}));\nassert(cumvecExists,'Make sure you define a variable with the name \"cumvec\".')\n\n% SECOND, try to make sure vec and mat are unchanged\n[rvec cvec] = size(vec);\nassert(and(rvec==1,and(gt(cvec,19),lt(cvec,51))),'Please do not change the initial expression for \"vec\".')\n\n% THIRD, check that the student didn't use the cumsum function\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','ID','String','cumsum');\nassert(isnull(matches),'Solution should NOT use the cumsum function.')\n\n% FOURTH, check that the student didn't use the sum function\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','ID','String','sum');\nassert(isnull(matches),'Solution should NOT use the sum function.')\n\n% FIFTH, make sure they use loops\ncode = fileread('solution.m');\nt = mtree(code);\nformatches = mtfind(t,'Kind','FOR');\nwhilematches = mtfind(t,'Kind','WHILE');\nassert(or(~isnull(formatches),~isnull(whilematches)),'Your solution should use loops!')\nloopcount = count(whilematches) + count(formatches);\nassert(loopcount == 1,'Make sure you use one loop for cumvec.')\n\n% SIXTH, check that the results are correct:\ntruecumvec = cumsum(vec);\nassert(isequal(truecumvec,cumvec),'Your result for \"cumvec\" is incorrect. Check your expressions.')"}