{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19592-5-7-vectorize-that"},"title":"5.7 - Vectorize That!","description":"Vectorize this code! Write *one* assignment statement that will accomplish exactly the same thing as the given code (the variable mat as already been initialized):\n\n  myvar = 0;\n  [r c] = size(mat);\n  for i = 1:r\n      for j = 1:c\n          myvar = myvar + mat(i,j);\n      end\n  end","type":1,"template":"% mat has been initialized for you:\nmat = randi([-100,100],randi([10,20]),randi([20,50]));\n  \n% write ONE statement that accomplishes the code above:\nmyvar = \n","solution":"% mat has been initialized for you:\nmat = randi([-100,100],randi([10,20]),randi([20,50]));\n  \n% write ONE statement that accomplishes the code above:\nmyvar = sum(sum(mat));\n","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nmyvarExists = any(strcmpi('myvar',{vars.name}));\nassert(myvarExists,'Make sure you define a variable with the name \"myvar\".')\n\n% check for correct function use\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','ID','String','cumsum');\nassert(isnull(matches),'cumsum is not the correct vectorized function. Check you vectorized expression and retrace the provided code; notice how the final result ought to be a single number, not a vector or matrix. You may have to use more than one vectorized function to accomplish the task.')\n\n% check that the result is correct:\ntest_myvar = sum(sum(mat));\nassert(isequal(test_myvar,myvar),'Your myvar is incorrect. Check you vectorized expression; notice how the final result ought to be a single number, not a vector. You may have to use more than one vectorized function to accomplish the task.')\n\n% check that the student didn't use any loops\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','FOR');\nassert(isnull(matches),'Your solution should not use any loops!')\n\nmatches = mtfind(t,'Kind','WHILE');\nassert(isnull(matches),'Your solution should not use any loops!')\n  \n% check that the student only used one statement to accomplish this\nbreaks = strfind(code,char(10)); % char(10) is the newline character used here\n  \n% number of line breaks used in the code is 1 less than the total number of lines\nassert(lt(numel(breaks),7),'Your solution should only use ONE line to accomplish this. ANY extra lines count - make sure there are no additional blank lines in your solution.')"}