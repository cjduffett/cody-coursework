{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19587-5-2-subplot"},"title":"5.2 - Subplot","description":"Using a for loop, write a script that will create a subplot for every row in the provided matrix, and will plot the numbers from each row in the *same* Figure Window.\n\nThe sample matrix is in the form:\n\n  mat = \n  1    8    3    7\n  5    9    4    2\n  ... etc.\n\nThis means that there are a variable number of rows and columns! Writing general code will ensure a correct answer. For example, for the matrix above the subplots may look like:\n\n<<https://edge.edx.org/asset-v1:BUx+ENGEK127+Spring2016+type@asset+block@subplot.png>>","type":1,"template":"% Given matrix:\nmat = randi([1,10],randi([2,6]),randi([3,5]));\n\n% create your subplots using a for loop:\n","solution":"% Given matrix:\nmat = randi([1,10],randi([2,6]),randi([3,5]));\n\n% create your subplots using a for loop:\n[r c] = size(mat);\nfor i = 1:r\nsubplot(1,r,i)\nplot(mat(i,:))\nend","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence\nvars = whos;\n  \nis_mat = any(strcmp('mat',{vars.name}));\nassert(is_mat,'Make sure you define a variable with the name \"mat\".')\n\n% verify that mat was not modified\ncode = fileread('solution.m');\nunchanged = strfind(code,'mat = randi([1,10],randi([2,6]),randi([3,5]));');\nassert(~isempty(unchanged),'Please do not change the expression for mat.')\n\n% check to see if the correct number of subplots were created (flipud because the handles are returned\n% in reverse order).\ntry\n  [r,c]=size(mat);\n  subplotaxhandles = flipud(get(get(0,'Children'),'Children'));\n  assert(isequal(r,numel(subplotaxhandles)),'Make sure you have one subplot for EACH ROW of the matrix.')\ncatch me\n  disp('There was an error grading the subplots. Make sure you are plotting!')\n  rethrow(me)\nend\n\n\n% Check to see if the plots are plotting the correct data.\n%plotstruct is a structure for some reason; we can index into it to pull out the YData of the plots\ntry\n  plotstruct = get(subplotaxhandles);\n  myplotdata = cell2mat(get([plotstruct.Children],'YData'));\n  assert(isequal(myplotdata,mat),'Make sure you are plotting the correct values. Each row of the given matrix   contains the y values for each subplot.')\ncatch me\n  disp('There was an error grading the values you plotted.')\n  rethrow(me)\nend\n\n% do we need to check for a for loop? It'd be tedious to answer this question without one.\n% Yep - still should check it:\nt = mtree(code);\nmatches = mtfind(t,'Kind','FOR');\nassert(~isnull(matches),'Your solution should use a FOR loop.')\n  \n% check that subplot was used only once (student didn't hard-code the answer\nsubplotidx = strfind(code,'subplot(');\nassert(isequal(numel(subplotidx),1),'You should only use the subplot function once, inside the for loop.')"}