{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19588-5-3-inverse-of-e"},"title":"5.3 - Inverse of e","description":"The inverse of the mathematical constant e can be approximated as follows:\n\n<<https://edge.edx.org/asset-v1:BUx+ENGEK127+Fall2015+type@asset+block/ws8_p2_formula.png>>\n\nWrite a script that will loop through values of n until the difference between the approximation and the actual value of the inverse is less than *0.0001*. The script should then store the value of n needed to reach this accuracy in the variable \"accurate_n\". Note: n should be an integer!\n\nIf you do not get a response from the server within 30 seconds, it's likely that you've caused an infinite loop. If this happens, you will need to change your loop condition. Resubmit your code when you are ready and the infinite loop will cease.","type":1,"template":"% write code to compute the value of the inverse to within the tolerance:\n  \n\n% store the value of n needed to reach this accuracy:\naccurate_n = \n","solution":"% write code to compute the value of the inverse to within the tolerance:\nn = 1;\ne_inv = exp(-1);\napprox = @(n) (1 - (1/n)) ^ n;\nwhile abs(approx(n) - e_inv) > 0.0001\n    n = n + 1;\nend\n\n% store the value of n needed to reach this accuracy:\naccurate_n = n;\n","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\naccurate_nExists = any(strcmpi('accurate_n',{vars.name}));\nassert(accurate_nExists,'Make sure you define a variable with the name \"accurate_n\".')\n\n% check that the student used a while loop\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','WHILE');\nassert(~isnull(matches),'Your solution should use a WHILE loop.')\n\n% the correct answer\ncorrect_n = 1839; % if using &gt;\ncorrect_n2 = 1840; % if using &gt;\n  \nassert(n == correct_n || n == correct_n2,'Your value of n is incorrect. Make sure your condition is correct and make sure you are changing your condition on every iteration of the loop.')"}