{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4367-chapter-5-loop-statements-and-vectorizing-code","problemName":"19591-5-6-vectorize-this"},"title":"5.6 - Vectorize This!","description":"Vectorize this code! Write *one* assignment statement that will accomplish exactly the same thing as the given code (the variable vec as already been initialized):\n\n  result = 0;\n  for i = 1:length(vec)\n      result = result + vec(i);\n  end","type":1,"template":"% vec has been initialized for you:\nvec = randi([-100,100],1,randi([20,50]));\n  \n% write ONE statement that accomplishes the code above:\nresult = \n","solution":"% vec has been initialized for you:\nvec = randi([-100,100],1,randi([20,50]));\n  \n% write ONE statement that accomplishes the code above:\nresult = sum(vec);\n","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nresultExists = any(strcmpi('result',{vars.name}));\nassert(resultExists,'Make sure you define a variable with the name \"result\".')\n\n% check that the student didn't use cumsum, prod, or cumprod\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','ID','String','cumsum');\nassert(isnull(matches),'cumsum is not the correct vectorized function. Check you vectorized expression and retrace the provided code.')\n\nmatches = mtfind(t,'Kind','ID','String','prod');\nassert(isnull(matches),'prod is not the correct vectorized function. Check you vectorized expression and retrace the provided code.')\n\nmatches = mtfind(t,'Kind','ID','String','cumprod');\nassert(isnull(matches),'cumprod is not the correct vectorized function. Check you vectorized expression and retrace the provided code.')\n\n% check that the result is correct:\ntest_result = sum(vec);\nassert(isequal(test_result,result),'Your result is incorrect. Check you vectorized expression and retrace the provided code; try running it in MATLAB to see what happens!')\n\n% check that the student didn't use any loops\ncode = fileread('solution.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','FOR');\nassert(isnull(matches),'Your solution should not use any loops!')\n\nmatches = mtfind(t,'Kind','WHILE');\nassert(isnull(matches),'Your solution should not use any loops!')\n  \n% check that the student only used one statement to accomplish this\nbreaks = strfind(code,char(10)); % char(10) is the newline character used here\n  \n% number of line breaks used in the code is 1 less than the total number of lines\nassert(lt(numel(breaks),7),'Your solution should only use ONE line to accomplish this. ANY extra lines count - make sure there are no additional blank lines in your solution.')"}