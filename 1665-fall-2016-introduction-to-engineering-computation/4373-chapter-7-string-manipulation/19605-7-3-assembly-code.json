{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4373-chapter-7-string-manipulation","problemName":"19605-7-3-assembly-code"},"title":"7.3 - Assembly Code","description":"Assembly language instructions frequently are in the form of a word that represents the operator and then the operands separated by a comma.  For example, the string ADD n,m  is an instruction to add n+m.  Write a function assembly_add that will receive a string in this form and will return the sum of n+m.  For example:\n\n  >> assembly_add('ADD 10,11')\n  \n  ans =\n  \n  21\n","type":0,"template":"function result = assembly_add(thestring)\nresult = \nend","solution":"function result = assembly_add(thestring)\nthestring(1:4) = [];\n[first, rest] = strtok(thestring,',');\nrest(1) = [];\nresult = str2num(first) + str2num(rest);\nend","visibleTests":"","hiddenTests":"%%\nstring = 'ADD 1,2';\ntheirans = assembly_add(string);\nassert(isequal(theirans,3),'Make sure your function is written as generally as possible! The user should be able to put in any two numbers and have it work; additionally, make sure the format is exactly as described in the instructions.')\n\nstring = 'ADD 11,22';\ntheirans = assembly_add(string);\nassert(isequal(theirans,33),'Make sure your function is written as generally as possible! The user should be able to put in any two numbers and have it work; additionally, make sure the format is exactly as described in the instructions.')"}