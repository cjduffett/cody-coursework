{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4373-chapter-7-string-manipulation","problemName":"19606-7-4-hamming-distance"},"title":"7.4 - Hamming Distance","description":"In information theory, the Hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are *different*. This is particularly useful when applied to error detection such as spell checking or autocorrection. Write a function *hamming()* that takes two strings as input and returns the Hamming distance. If the strings are not the same length, the function should return *-1*.","type":0,"template":"function d = hamming(str1, str2)\n  d = ?\nend","solution":"function d = hamming(str1, str2)\n  if length(str1) ~= length(str2)\n    d = -1;\n  else\n    d = sum(str1 ~= str2);\n  end\nend","visibleTests":"","hiddenTests":"%%\ns1 = 'Sunday';\ns2 = 'Monday';\nd_correct = 2;\nassert(isequal(hamming(s1,s2),d_correct))\n\n%%\ns1 = 'Cody is not fun?';\ns2 = 'Cody is awesome!';\nd_correct = 8;\nassert(isequal(hamming(s1,s2),d_correct))\n\n%%\ns1 = 'I do not like MATLAB';\ns2 = 'I really love MATLAB';\nd_correct = 8;\nassert(isequal(hamming(s1,s2),d_correct))\n\n%%\ns1 = 'abcdefghijklmnopqrstuvwxyz';\ns2 = 'AbcdEfghIjklmnOpqrstUvwxyz';\nd_correct = 5;\nassert(isequal(hamming(s1,s2),d_correct), 'Your function should be case sensitive.')\n\n%%\ns1 = '1234567891011121314151617181920';\ns2 = '2019181716151413121110987654321';\nd_correct = 27;\nassert(isequal(hamming(s1,s2),d_correct), 'Your function should also compare numbers in strings, e.g. ''5''.')\n\n%%\ns1 = 'race car';\ns2 = 'rac ecar';\nd_correct = 2;\nassert(isequal(hamming(s1,s2),d_correct), 'Your function should also compare the spaces in words when computing the Hamming distance.')\n\n%%\ns1 = 'Are these strings identical?';\ns2 = 'Are these strings identical?';\nd_correct = 0;\nassert(isequal(hamming(s1,s2),d_correct))\n\n%\ns1 = '';\ns2 = '';\nd_correct = 0;\nassert(isequal(hamming(s1,s2),d_correct), 'Your function should also work for empty strings, e.g. ''''')\n\n%%\ns1 = 'foo';\ns2 = 'foobar';\nd_correct = -1;\nassert(isequal(hamming(s1,s2),d_correct), 'Your function should return -1 if the two strings are not the same length.')"}