{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4368-chapter-6-matlab-programs","problemName":"19602-6-8-pay-day"},"title":"6.8 - Pay Day","description":"You were just hired by a bank in the area to fix a buggy program written by a since fired programmer. This function is supposed to do the following:\n\n* Receive a method (withdraw, deposit, or balance)\n* Perform the respective operation and return the current account balance\n* If the withdrawal amount exceeds the balance, cancel the transaction and return the balance\n\nThe account balance should persist between function calls. For example, if you did the following:\n\n  >> bankingsystem('d', 10000) % deposit 10,000\n  ans = \n        10000\n  >> bankingsystem('w', 5000) % withdraw 5,000\n  ans = \n        5000\n  >> bankingsystem('b', 0) % the amount doesn't matter when getting the balance\n  ans = \n        5000\n  >> bankingsystem('w', 10000) % the account is overdrawn!\n  ans = \n        5000\n\nThe main function header, bankingsystem() has been written for you and it is up to you to fix the issues so this bank can be up and running again!","type":0,"template":"function balance = bankingsystem(mode, amount)\n\n    \nend","solution":"function balance = bankingsystem(mode, amount)\n    % banking system receives a mode (deposit, withdraw, balancecheck) and\n    % performs the proper operation, returning the balance to the user\n    % after each operation, or if the user just wants to check their\n    % balance.\n    \n    persistent acctbalance;\n    if isempty(acctbalance)\n        acctbalance = 0;\n    end\n    \n    if mode == 'd'\n        acctbalance = acctbalance + amount;\n        balance = acctbalance;\n    elseif mode == 'w'\n        if (acctbalance - amount >= 0)\n            acctbalance = acctbalance - amount;\n            balance = acctbalance;\n        else\n            balance = acctbalance;\n        end\n    elseif mode == 'b'\n        balance = acctbalance;\n    end\n   \nend","visibleTests":"","hiddenTests":"%%\n\n% testing bank functions\nmode = 'd';\namount = 500;\nassert(bankingsystem(mode,amount)==500, 'Your function did not properly return the balance after a deposit was sent.')\n\nmode = 'd';\namount = 500;\nassert(bankingsystem(mode,amount)==1000, 'Your function did not properly return the balance after a deposit was sent.')\n\nmode = 'd';\namount = 5000;\nassert(bankingsystem(mode,amount)==6000, 'Your function did not properly return the balance after a deposit was sent.')\n\nmode = 'w';\namount = 200;\nassert(bankingsystem(mode,amount)==5800, 'Your function did not properly return the balance after a withdrawal was sent.')\n\nmode = 'w';\namount = 7000;\nassert(bankingsystem(mode,amount)==5800, 'Your function should cancel a transaction that exceeds the account balance and return the most recent balance!')\n\nmode = 'b';\namount = 0;\nassert(bankingsystem(mode,amount)==5800, 'Your function did not properly return the balance when only the balance was desired.')\n\ncode  = fileread('bankingsystem.m');\nt = mtree(code);\n\n% checking to see if persistent variable made\nmatches_persistent = mtfind(t,'Kind','ID','String','persistent');\nassert(isnull(matches_persistent),'Keep in mind your function should maintain the current balance after subsequent runs.')\n\nclear functions"}