{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4368-chapter-6-matlab-programs","problemName":"19598-6-4-multiplication-tables"},"title":"6.4 - Multiplication Tables","description":"Multiplication tables can be formed as matrices in MATLAB. Create a function utilizing a loop to generate a multiplication table formed by a square matrix for any given integer passed to the function. Below is an example of what the matrix should look like if 12 is passed to the function.\n\n<<https://drive.google.com/uc?id=0B7LvEqAdzTREV1VjN0R6c3VrMDQ>>","type":0,"template":"function table = mult_table(n)\n\n\ntable = \n\nend","solution":"%reference solution\nfunction table = mult_table(n)\n\nmat = ones(n);\n\nfor i = 1:n\n    for j = 1:n\n        mat(i,j) = i*j;\n    end\nend\n\n\ntable = mat;\n\nend\n\n","visibleTests":"","hiddenTests":"%%\n\n% checking to ensure multiplication table is correct\nn = 5;\nmat = mult_table(n);\n\nfor i = 1:n\n     assert(mat(i,i) == i^2, 'Go back and check your multiplication table. The result was not correct!')\nend\n\n% checking for loop existence\ncode  = fileread('mult_table.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','FOR');\nassert(~isnull(matches),'Your solution should use a for loop.')\n\n% checking to make sure code is efficient\nsize_Match = mtfind(t,'Kind','ID','String','size');\nassert(isnull(size_Match),'While the size function can be used, try to produce the most efficient solution without using size!')"}