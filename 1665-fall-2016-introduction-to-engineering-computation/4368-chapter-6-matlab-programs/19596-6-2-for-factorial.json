{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4368-chapter-6-matlab-programs","problemName":"19596-6-2-for-factorial"},"title":"6.2 - ! for Factorial","description":"Factorials represent the product of all positive integers less than or equal to a given positive number. Write a function that will receive as input either a single positive number or a vector of positive numbers and return the product equivalents as a vector.\n\nFor example, if 5! is passed to the function, the output would be 120. Likewise, if a vector [6 4 2 1] is passed, the function will return a vector with the products of each factorial. Make sure you use a for loop in your solution.","type":0,"template":"function output = fact2prod(n)\n\n\n    output = \n\nend","solution":"function output = fact2prod(n)\nprodn = ones(1,length(n));\nfor i = 1:length(n)\n    for j = n(i):-1:1\n        prodn(i) = j * prodn(i);\n    end\nend\n    \n    output = prodn;\nend","visibleTests":"","hiddenTests":"%%\n\n% testing factorials\nn = 5;\nassert(fact2prod(n)==120, 'Wait! Your function did not calculate 5! correctly.')\nn = 1;\nassert(fact2prod(n)==1, 'Oops! Your function did not calculate 1! correctly.')\nn = 10;\nassert(fact2prod(n)==3628800,'Not so fast! Your function did not calculate 10! correctly.')\nn = 4;\nassert(fact2prod(n)==24, 'Oops! Your function did not calculate 4! correctly.')\nn = 0;\nassert(fact2prod(n)==1, 'Hmm...Your function did not calculate 0! correctly.')\n\n% testing vector functionality\nn = [6 4 2 1];\nassert(isequal(fact2prod(n),[720 24 2 1]), 'Make sure your function can receive a vector input of integers and return a vector output of products for each factorial. Such that [6 4 2 1] returns [720 24 2 1].')\n\n% check to see if student used a for loop (required)\ncode  = fileread('fact2prod.m');\nt = mtree(code);\nmatches = mtfind(t,'Kind','FOR');\nassert(~isnull(matches),'Your solution should use a for loop / nested for loops.')\n\n% checking to see if the built in factorial(n) function was used\nmatches_isprime = mtfind(t,'Kind','ID','String','factorial');\nassert(isnull(matches_isprime),'Make sure to not use the factorial built in function!')"}