{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4364-chapter-3-introduction-to-matlab-programming","problemName":"19577-3-10-tangents"},"title":"3.10 - Tangents","description":"Create a file \"testtan.dat\" which has 2 lines, with 3 *real* numbers on each line (some negative, some positive, in the range from -1 to 3; think of a function you can use to make a matrix of *random real* numbers!). Then, load the file into a matrix and calculate the tangent of every element.","type":1,"template":"% save valid data to \"testtan.dat\"\n\n\n% load \"testtan.dat\" and store the tangent of every element in the matrix \"mytangents\":\n\n\nmytangents = \n","solution":"% save valid data to \"testtan.dat\"\nmat = rand(2,3) * 4 - 1;\nsave testtan.dat mat -ascii\n\n% load \"testtan.dat\" and store the tangent of every element in the matrix \"mytangents\":\nload testtan.dat\nmytangents = tan(testtan);\n","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check that the student used the rand(), load(), and save() functions\ncode = fileread('solution.m');\nt = mtree(code);\nloadmatches = mtfind(t,'Kind','ID','String','load');\nassert(~isnull(loadmatches),'Your solution should use the load() function.')\nsavematches = mtfind(t,'Kind','ID','String','save');\nassert(~isnull(savematches),'Your solution should use the save() function.')\nrandmatches = mtfind(t,'Kind','ID','String','rand');\nassert(~isnull(randmatches),'Make sure you are randomly generating your REAL numbers! What function can accomplish that task?')\n  \n% define filename to check\nfnameToSearch = 'testtan.dat';\n  \n% check that the student used the correct filename\nfilesInDir = ls;\n\n% windows and UNIX based machines handle ls differently\nif ispc\n  % PC handles the file list as a character matrix\n  [f_rows f_cols] = size(filesInDir);\n  filesInDir = [filesInDir, (blanks(f_rows)')]; % append leading white space to use as delimiter\n  filesToCheck = reshape(filesInDir,1,numel(filesInDir));\n  results = strfind(filesToCheck,fnameToSearch);\nelse\n  % UNIX handles the file list as a string. So much smarter...\n  results = strfind(filesInDir,fnameToSearch);\nend\n\n% check the dimensions of the matrix\n[myr,myc] = size(testtan);\nassert(and(isequal(myr,2),isequal(myc,3)),'Make sure your matrices are 2 by 3.')\n\nassert(~isempty(results),'Make sure you create a file with the name \"testtan.dat\".')\n  \n% check for the -ascii qualifier\nasciimatches = strfind(code,'-ascii');\nassert(~isempty(asciimatches),'You should use the -ascii qualifier every time you write to a file.')\n  \n% check for variable existence\nvars = whos;\n\nmytangentsExists = any(strcmpi('mytangents',{vars.name}));\nassert(mytangentsExists,'Make sure you define a variable with the name \"mytangents\".')\n  \n% check the file contents for valid values\nonthebeach = load('testtan.dat');\nassert(all(all(gt(onthebeach,-1.0001))),'You must use values between -1 and 3.')\nassert(all(all(lt(onthebeach,3.0001))),'You must use values between -1 and 3.')\n  \n% make sure they used real numbers, not integers\ninttest = int32(onthebeach);\nassert(~any(any(inttest == onthebeach)),'Your file must contain REAL numbers, not integers.')\n\n% check the final result\nsunburn = tan(onthebeach);\nassert(isequal(mytangents,sunburn),'Make sure you compute the tangent of every element in the matrix.')"}