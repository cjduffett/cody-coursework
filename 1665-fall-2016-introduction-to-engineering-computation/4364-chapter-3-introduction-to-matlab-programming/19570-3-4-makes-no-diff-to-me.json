{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4364-chapter-3-introduction-to-matlab-programming","problemName":"19570-3-4-makes-no-diff-to-me"},"title":"3.4 - Makes No Diff to Me","description":"Assume that the function diff does not exist. Write your own expression(s) to accomplish the same thing for a vector \"vec\" and store it in \"mydiff\".","type":1,"template":"% Generating a random vector \"vec\":\nvec = randi([-5,5],1,10);\n\n% Perform the action of the diff function without using it:\nmydiff = ","solution":"% Generating a random vector \"vec\":\nvec = randi([-5,5],1,10);\n\n% Perform the action of the diff function without using it:\nmydiff = vec(2:end) - vec(1:end-1);","visibleTests":"","hiddenTests":"%%\nrun('solution');\n\n% check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nis_vec = any(strcmp('vec',{vars.name}));\nassert(is_vec,'Make sure you define a variable with the name \"vec\".')\n\nis_mydiff = any(strcmp('mydiff',{vars.name}));\nassert(is_mydiff,'Make sure you define a variable with the name \"mydiff\".')\n\n% Check that vec is a vector\n[r c] = size(vec);\nassert(isequal(c,length(vec)),'Make sure vec is a row vector.')\n\n% Make sure vec is generated randomly; aka enforce the randi function or the rand function\ncode = fileread('solution.m');\nt = mtree(code);\nmatchesrandi = mtfind(t,'Kind','ID','String','randi');\nmatchesrand = mtfind(t,'Kind','ID','String','rand');\nassert(~isnull(matchesrandi) || ~isnull(matchesrand),'Make sure to generate \"vec\" using one of the random number functions.')\n\n% Check mydiff's dimensions; it should be 1 less element than vec\nassert(isequal(length(mydiff),length(vec)-1),'Make sure mydiff has the correct number of elements.')\n\n% check if mydiff is correct!\nassert(isequal(diff(vec),mydiff),'Check your expression for mydiff.')\n\n% check to make sure student is not using diff\n%unnecessary line: code = fileread('sourceFile.m');\n%also unnecessary: t = mtree(code);\nmatches = mtfind(t,'Kind','ID','String','diff');\nassert(isnull(matches),'Solution should NOT use the diff function.')\n\n% check to make sure they are using the subtraction operator\nfid = fopen('solution.m');\nif fid == -1\n  %do nothing\nelse\n  i = 1;\n  while ~feof(fid)\n    aline = fgetl(fid);\n    if isempty(aline)\n    else\n    if strcmp(aline(1),'%')\n      %do nothing\n    else\n      yesorno(i) = any(strfind(aline,'-'));\n      i = i + 1;\n    end\n    end\n  end\n  isminus = any(yesorno);\n  assert(isminus,'For an efficient solution, make sure you use the subtraction operator. Do not hardcode the vector.')\n  fclose(fid);\nend"}