{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4364-chapter-3-introduction-to-matlab-programming","problemName":"19572-3-6-find-vs-logical-indexing"},"title":"3.6 - Find vs. Logical Indexing","description":"A vector _vec_  has values between -5 and 5. Store the positive elements of _vec_ into _posvec_ without using the *find* function. (Use logical indexing)","type":1,"template":"%vec is initialized here, don't change it:\nvec = randi([-5 5], 1, 10);\n\n%now assign the positive values of vec into posvec without using the find function:\nposvec = ???","solution":"%vec is initialized here, don't change it:\nvec = randi([-5 5], 1, 10);\n\n%now assign the positive values of vec into posvec without using the find function:\nposvec = vec(vec>0);","visibleTests":"","hiddenTests":"%%\nrun('solution');\n\n% check for variable existence. Do this for all named variables in the\n% problem description or variables provided in the initial_display\nvars = whos;\n\nis_vec = any(strcmp('vec',{vars.name}));\nassert(is_vec,'Make sure you define a variable with the name \"vec\" Do not change the initial line we provided!')\n\nis_posvec = any(strcmp('posvec',{vars.name}));\nassert(is_posvec,'Make sure you define a variable with the name \"posvec\".')\n\n% Check that vec is a vector\n[r c] = size(vec);\nassert(isequal(c,length(vec)),'Make sure vec is a row vector.')\n\n% Make sure vec is generated randomly; aka enforce the randi function or the rand function\ncode = fileread('solution.m');\nt = mtree(code);\nmatchesrandi = mtfind(t,'Kind','ID','String','randi');\nmatchesrand = mtfind(t,'Kind','ID','String','rand');\nassert(~isnull(matchesrandi),'Make sure to generate \"vec\" using randi.')\n\n% Check if posvec is correct\ntrueposvec = vec(vec>0);\nassert(isequal(trueposvec,posvec),'Make sure posvec contains only the positive values from vec.')\n\n% check to make sure student is not using find\nmatches = mtfind(t,'Kind','ID','String','find');\nassert(isnull(matches),'Solution should NOT use the find function. Use logical indexing instead.')\n\n% check for assignment suppression\nnum_suppressions = 2;\ncode = fileread('solution.m');\nscolons = strfind(code, ';');\nassert(numel(scolons) >= num_suppressions, 'Make sure to suppress your variable assignments. For example: r = 4;')"}