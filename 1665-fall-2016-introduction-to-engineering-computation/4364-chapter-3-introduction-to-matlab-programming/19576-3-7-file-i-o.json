{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4364-chapter-3-introduction-to-matlab-programming","problemName":"19576-3-7-file-i-o"},"title":"3.7 - File I/O","description":"Create a *3 by 6* matrix of random integers \"mat1\" with values in the range from 50 to 100. Write this to a file called \"randfile.dat\". Then, create a new matrix of random integers but this time make it a *2 by 6* matrix of random integers \"mat2\" with values in the range 50 to 100. Append this matrix to your file. Then read the file in (which will be to a variable called \"randfile\") just to make sure that worked!\n\n*Don't forget to use the -ascii qualifier when you save files!*","type":1,"template":"% create a 3 by 6 matrix of random integers and write it to \"randfile.dat\"\nmat1 = \n  \n% append a 2 by 6 matrix of random integers to \"randfile.dat\"\nmat2 =   \n\n% load \"randfile.dat\" to check that it's right!\n","solution":"% create a 3 by 6 matrix of random integers and write it to \"randfile.dat\"\nmat1 = randi([50,100],3,6);\nsave randfile.dat mat1 -ascii\n  \n% append a 2 by 6 matrix of random integers to \"randfile.dat\"\nmat2 =   randi([50,100],2,6);\nsave randfile.dat mat2 -ascii -append\n\n% load \"randfile.dat\" to check that it's right!\nload randfile.dat","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check that the student used the load() and save() functions\ncode = fileread('solution.m');\nt = mtree(code);\nloadmatches = mtfind(t,'Kind','ID','String','load');\nassert(~isnull(loadmatches),'Your solution should use the load() function.')\nsavematches = mtfind(t,'Kind','ID','String','save');\nassert(~isnull(savematches),'Your solution should use the save() function.')\n\n% check for variable existence\nvars = whos;\n  \n% check the matrices that the student will be saving\nis_mat1 = any(strcmp('mat1',{vars.name}));\nassert(is_mat1,'Make sure you define a variable with the name \"mat1\".')\n\nis_mat2 = any(strcmp('mat2',{vars.name}));\nassert(is_mat2,'Make sure you define a variable with the name \"mat2\".')\n  \n% check that the student loaded the matrix into the variable \"randfile\"\nrandfileExists = any(strcmpi('randfile',{vars.name}));\nassert(randfileExists,'Make sure you load your final result into the variable \"randfile\".')\n  \n% check the contents of mat1 and mat2\n[rtest, ctest] = size(mat1);\nassert(rtest == 3,'Make sure mat1 has 3 rows.')\nassert(ctest == 6,'Make sure mat1 has 6 columns.')\nassert(all(all(gt(mat1,49))),'Make sure mat1 has values between 50 and 100.')\nassert(all(all(lt(mat1,101))),'Make sure mat1 has values between 50 and 100.')\n  \n[rtest, ctest] = size(mat2);\nassert(rtest == 2,'Make sure mat2 has 2 rows.')\nassert(ctest == 6,'Make sure mat2 has 6 columns.')\nassert(all(all(gt(mat2,49))),'Make sure mat2 has values between 50 and 100.')\nassert(all(all(lt(mat2,101))),'Make sure mat2 has values between 50 and 100.')\n  \n% define filename to check\nfnameToSearch = 'randfile.dat';\n  \n% check that the student used the correct filename\nfilesInDir = ls;\n\n% windows and UNIX based machines handle ls differently\nif ispc\n  % PC handles the file list as a character matrix\n  [f_rows f_cols] = size(filesInDir);\n  filesInDir = [filesInDir, (blanks(f_rows)')]; % append leading white space to use as delimiter\n  filesToCheck = reshape(filesInDir,1,numel(filesInDir));\n  results = strfind(filesToCheck,fnameToSearch);\nelse\n  % UNIX handles the file list as a string. So much smarter...\n  results = strfind(filesInDir,fnameToSearch);\nend\n  \nassert(~isempty(results),'Make sure you create a file with the name \"randfile.dat\".')\n  \n% check for the -ascii and -append qualifiers\nasciimatches = strfind(code,'-ascii');\nassert(~isempty(asciimatches),'You should use the -ascii qualifier every time you write to a file.')\n\nappendmatches = strfind(code,'-append');\nassert(~isempty(appendmatches),'You should use the -append qualifier to append to a file.')\n  \n% check the student's final result\ntestmat = [mat1 ; mat2];\ntestdata = load('randfile.dat');\nassert(isequal(testmat,testdata),'Your file contents are incorrect. Check that you append to the file correctly.')"}