{"meta":{"courseName":"1665-fall-2016-introduction-to-engineering-computation","assignmentName":"4364-chapter-3-introduction-to-matlab-programming","problemName":"19575-3-9-sine-wave"},"title":"3.9 - Sine Wave","description":"Write a script that will plot *sin(x)* for x values *ranging from 0 to pi* (in separate figure windows):\n\n* using *10* equally-spaced points in this range\n* using *100* equally-spaced points in this range\n\nYour \"figure windows\" will appear below this problem statement.\n\n\nPlease use the variable names provided and don't forget to suppress your assignment statements!","type":1,"template":"% create a plot using 10 points:\nx1 =\n  \n\n% create a plot (in a separate figure window) using 100 points:\nx2 = ","solution":"% create a plot using 10 points:\nx1 = linspace(0, pi, 10);\nplot(x1, sin(x1))\n  \n\n% create a plot (in a separate figure window) using 100 points:\nx2 = linspace(0,pi,100);\nfigure(2)\nplot(x2,sin(x2))","visibleTests":"","hiddenTests":"%%\nrun('solution')\n\n% check for variable existence\nvars = whos;\n  \nis_x1 = any(strcmpi('x1',{vars.name}));\nassert(is_x1,'Make sure you define a variable with the name \"x1\".')\n\nis_x2 = any(strcmpi('x2',{vars.name}));\nassert(is_x2,'Make sure you define a variable with the name \"x2\".')\n\n% check the values of x1 and x2:\nx1_test = linspace(0,pi,10);\nx1_test_alt = 0:pi/9:pi;\nx2_test = linspace(0,pi,100);\nx2_test_alt = 0:pi/99:pi;\n  \nassert(or(isequal(x1,x1_test),isequal(x1,x1_test_alt)),'Check your expression for x1. Make sure you have 10 points in the range 0 to pi.')\nassert(or(isequal(x2,x2_test),isequal(x2,x2_test_alt)),'Check your expression for x2. Make sure you have 100 points in the range 0 to pi.')\n  \n% check for two figure windows, NOTE: handles are a column vector in reverse order, hence the flipud\nfig_Handles = flipud(get(0,'Children'));\nassert(numel(fig_Handles) == 2,'Make sure you create two separate figure windows, one for each plot.')\n\n% check plot 1 (10 points)\nah1 = get(fig_Handles(1),'CurrentAxes');\nplotobj1 = get(ah1,'Children');\n  \ntry\n  x1_user = get(plotobj1,'XData');\n  assert(or(isequal(x1_user,x1_test),isequal(x1_user,x1_test_alt)),'Make sure you plot the correct x-values.')\n  y1_user = get(plotobj1,'YData');\n  y1_test = sin(x1_test);\n  y1_test_alt = sin(x1_test_alt);\n  assert(or(isequal(y1_user,y1_test),isequal(y1_user,y1_test_alt)),'Make sure you plot the correct y-values.')\ncatch me\n  disp('There was an error grading plot 1.')\n  rethrow(me)\nend\n\n% check plot 2 (100 points)\nah2 = get(fig_Handles(2),'CurrentAxes');\nplotobj2 = get(ah2,'Children');\n\ntry\n  x2_user = get(plotobj2,'XData');\n  assert(or(isequal(x2_user,x2_test),isequal(x2_user,x2_test_alt)),'Make sure you plot the correct x-values.')\n  y2_user = get(plotobj2,'YData');\n  y2_test = sin(x2_test);\n  y2_test_alt = sin(x2_test_alt);\n  assert(or(isequal(y2_user,y2_test),isequal(y2_user,y2_test_alt)),'Make sure your plot the correct y-values.')\ncatch me2\n  disp('There was an error grading plot 2.')\n  rethrow(me2)\nend"}